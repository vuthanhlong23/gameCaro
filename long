from tkinter import* 
from math import*
from tkinter import Tk, Canvas, Frame, BOTH
from tkinter import ttk
import tkinter
import sys


def info():
    six=tkinter.Tk()
    six.configure(background="cyan")
    six.title("Group's information")
    six.geometry('600x400+400+400')
    text = Label(six, text="Leader:Nguyen Thi Anh Dao \n Secretary: Phan Ngoc Thien An \n Main Developer: Vu Cong Minh \n Sub Developer:Truong Hoang Phuc, Vu Thanh Long \n\n <<Thank You For Playing>>",font=("Calibri", 20, "bold"),)
    text.grid(column=10,row=10)
    text.configure(background="cyan")

s1="Player 1"
s2="Player 2"

def Setting():
    global var,s1,s2,gray1,gray2,dem1
    dem1=1
    new=Tk()
    new.geometry('300x300')
    bar=Scale(new,orient=HORIZONTAL,from_=1,to =2,tickinterval=1,sliderlength=15,length=50)
    bar.place(x=80,y=10)
    text=Label(new,text="LEVELS")
    text.place(x=35,y=30)
    check1= Checkbutton(new,text="Small Screen",command=small)
    check1.place(x=35,y=70)
    check2=Checkbutton(new,text="Medium Screen",offvalue=1,command=medium)
    check2.place(x=35,y=90)
    check3= Checkbutton(new,text="Large Screen",command=large)
    check3.place(x=35,y=110)
    s1=StringVar()
    s2=StringVar()
    name1=ttk.Label(new,text="Host's name",font=("Verdana",10,"bold","underline"))
    name1.place(x=30,y=150)
    name2=ttk.Label(new,text="Challenger's name",font=("Verdana",10,"bold","underline"))
    name2.place(x=30,y=180)
    gray1=Entry(new)
    gray1.place(x=170,y=150)
    gray2=Entry(new)
    gray2.place(x=170,y=180)
    butt1=Button(new,text="Confirm",font="none 10 bold",command=butt)
    butt1.place(x=120,y=250)
    new.mainloop()

def large():
    global init_width,init_height,m_height,n_height,m,n,right_width,right_height,init1,init2,init3,init4,init5,init6,init7,init8,text1,text2,text3,text4,init10,init9
    init_width=966
    init_height=768
    n=31
    m=23
    m_height=900
    n_height=660
    right_width=400
    right_height=768
    init1=10
    init2=150
    init3=200
    init4=200
    init5=205
    init6=150
    init7=380
    init8=200
    text1=110
    text2=170
    text3=300
    text4=170
    init9=185
    init10=415

def medium():
    global init_width,init_height,m_height,n_height,m,n,right_width,right_height,init1,init2,init3,init4,init5,init6,init7,init8,text1,text2,text3,text4,init10,init9
    init_width= 630
    init_height=630
    m_height=600
    n_height=600
    m=21
    n=21
    right_width=330
    right_height=630
    init1=20
    init2=100
    init3=250
    init4=150
    init5=20
    init6=200
    init7=250
    init8=250
    text1=90
    text2=120
    text3=90
    text4=220
    init9=160
    init10=400

def small():
    global init_width,init_height,m_height,n_height,m,n,right_width,right_height,init1,init2,init3,init4,init5,init6,init7,init8,text1,text2,text3,text4,init10,init9
    init_width= 430
    init_height=430
    m_height=390
    n_height=390
    m=14
    n=14
    right_width=330
    right_height=430
    init1=40
    init2=60
    init3=200
    init4=110
    init5=40
    init6=140
    init7=200
    init8=190
    text1=100
    text2=90
    text3=100
    text4=165
    init9=110
    init10=290
    
def quit():
	exit()

def butt():
    global s1
    global s2
    global gray1
    global gray2
    s1=StringVar()
    s2=StringVar()
    s2=gray2.get()
    s1=gray1.get()
    game=StringVar()


def Exit():
    tk=Tk()
    lb=Label(tk,text ="DO YOU WANT EXIT GAME")
    lb.place(x=25,y=60)
    yes=Button(tk,text ="YES",command=quit)
    yes.place(x=70,y=85)
    no=Button(tk,text ="NO",command=tk.destroy)
    no.place(x=105,y=85)
    tk.mainloop()
two=Tk()
two.title("Game Project")
var=0

three=Canvas(two,width =900, height = 630,background="#f4bc42")
three.pack()

label = Label(two,text="GAME\nCARO",bg="#f4bc42",font="none 60 bold")
label.place(x=350,y=100)
blue=Button(two,text="New Game",font="none 10 bold",width=15,height=3,command=two.destroy)
blue.place(x=400,y=320)
red=Button(two,text="Group Informaton",font="none 10 bold",width=15,height=3,command=info)
red.place(x=400,y=400)
Sett=Button(two,text="Settings",font="none 10 bold",width=15,height=3,command=Setting)
Sett.place(x=400,y=480)
orange=Button(two,text="Exit :(",font="none 10 bold",width=15,height=3,command=Exit)
orange.place(x=400,y=560)
two.mainloop()


class Example(Frame):
   def __init__(self, parent):
       Frame.__init__(self, parent)
       self.parent = parent
       self.initUI()

   def initUI(self):
       self.parent.title("Caro game")
       self.pack(fill=BOTH, expand=1)

       canvas = Canvas(self)
       canvas.pack(fill=BOTH, expand=1)
       #black=ttk.Label(canvas,text="INGAME OPTIONS: ",font=("Calibri", 15, "italic"))
       #black.pack(side=LEFT)
       yellow=Button(canvas,text="2 player :)",command=reset,height=2,width=20)
       yellow.pack(side=LEFT)
       green=Button(canvas,text="Quit",command=lambda:[f() for f in[caro.destroy]],height=2,width=20)
       green.pack(side=LEFT)

def reset():
    board.delete("all")
    x1.clear()
    y1.clear()
    x2.clear()
    y2.clear()
    x3.clear()
    y3.clear()
    x4.clear()
    y4.clear()	
    Arrayx.clear()
    Arrayy.clear()
    global stop
    stop=0
    dem=0
    veBanCo()

caro=Tk()

caro.title("The Game")
medium()
board = Canvas( caro, width = init_width, height = init_height,background="#f4bc42")
board.pack(side = LEFT)

ex = Example(caro)

def veBanCo():
    for i in range(0,n):
        board.create_line(i*30,30,i*30,n_height)
    for i in range(0,m):
        board.create_line(30,i*30,m_height,i*30)

veBanCo()

count=0	#turn
stop=0

x1=[]		#x_cross
y1=[]		#y_cross
x2=[]		#x_circle
y2=[]		#y_circle
x3=[]		#x1'=630-x1
y3=[]		#y1'=630-y1
x4=[]		#x2'=630-x2
y4=[]		#y2'=630-y2
Arrayx=[] 	#incoincidence
Arrayy=[]	#incoincidence

def save_cross(x,y):
	x1.append(x)
	y1.append(y)
	x3.append(630-x)
	y3.append(630-y)
	
def save_circle(x,y):
	x2.append(x)
	y2.append(y)
	x4.append(630-x)
	y4.append(630-y)
	
def save(x,y):
	Arrayx.append(x)
	Arrayy.append(y)
	
def check(x,y):
	for i in range (len(Arrayx)):
		if x==Arrayx[i] and y==Arrayy[i]:
			return 1
	return 0
	
def check_cross(x,y):
	for i in range(len(x1)):
		if x==x1[i] and y==y1[i]:
			return 1
	return 0
	
def check_circle(x,y):
	for i in range(len(x2)):
		if x==x2[i] and y==y2[i]:
			return 1
	return 0

def draw_cross(x,y):
	board.create_line(x-10,y-10,x+10,y+10,fill="red",width=3)
	board.create_line(x+10,y-10,x-10,y+10,fill="red",width=3)
	
def draw_circle(x,y):
	board.create_oval(x-10,y-10,x+10,y+10,outline="green",width=3)

def point(p):
	a=int((p/10))
	a=a*10
	i=0
	for i in range (0,15):
		if ((a-i)%30 ==0):
			a=a-i
			break
	if (i<15):
		for i in range (0,15):
			if ((a+i)%30 ==0):
				a=a+i
				break
	return a			
		
def Straight(x,y,x1,y1,x2,y2): #Done
	def Leftest(x,y,x1,y1,x2,y2):
		countLeft1=0
		countRight1=0
		block1=0
		for i in range(len(x1)):
			if y==y1[i]:
				for j in range (1,5): # 1,2,3,4
					if (x-j*30)==x1[i]: 
						countLeft1+=1 #max->4
				if (x+30)==x1[i]:
					countRight1+=1 #Right="wrong"
		for k in range(len(x2)):
			if y==y2[k]:
				if (x+30)==x2[k] or (x-5*30)==x2[k]:
					block1+=1
		if block1<2 and countLeft1==4 and countRight1==0:
			return 1
		return 0		
	
	def Mid(x,y,x1,y1,x2,y2):
		countmidleft=0
		countmidright=0
		blockmid=0
		sixthmid=0
		for i in range(len(x1)):
			if y==y1[i]:
				for j in range (1,3):# 1,2
					if (x-j*30)==x1[i]: 
						countmidleft+=1
					if (x+j*30)==x1[i]:
						countmidright+=1
				if (x-3*30)==x1[i] or (x+3*30)==x1[i]:
					sixthmid+=1		
		for k in range(len(x2)):
			if y==y2[k]:
				if (x+3*30)==x2[k] or (x-3*30)==x2[k]:
					blockmid+=1			
		if countmidleft==2 and countmidright==2 and blockmid<2 and sixthmid==0:
			return 1
		return 0	
	#3 and 1	
	def AnotherPlace(x,y,x1,y1,x2,y2):
		countLeft3 =0
		countRight3=0
		block3=0
		sixth3=0
		for i in range(len(x1)):
			if y==y1[i]:
				for j in range(1,4): #1,2,3
					if (x-j*30)==x1[i]:
						countLeft3+=1 #-->max=3
				if (x+30)==x1[i]:
					countRight3+=1
				if (x-4*30)==x1[i] or (x+2*30)==x1[i] :
					sixth3+=1		
		for k in range (len(x2)):				
			if y==y2[k]:				
				if (x+2*30)==x2[k] or (x-4*30)==x2[k]:
					block3+=1
		if countLeft3==3 and countRight3==1 and sixth3==0 and block3<2:
			return 1
		return 0	

	if AnotherPlace(x,y,x1,y1,x2,y2) or Mid(x,y,x1,y1,x2,y2) or Leftest(x,y,x1,y1,x2,y2):
		return 1
	return 0
		
def Skew(x,y,x1,y1,x2,y2):	#Done
	#UptoRight
	def UR_First(x,y,x1,y1,x2,y2):
		UR_count1left=0
		UR_count1right=0
		UR_block1=0
		for i in range (len(x1)):
			for j in range(1,5): #1,2,3,4
				n1=y1[i]-y
				if (n1/30)==j:
					if n1==x-x1[i]:
						UR_count1left+=1
			if x1[i]-x==30 and y-y1[i]==30:
				UR_count1right+=1			
		for k in range (len(x2)):
			if (x2[k]-x)==30 and (y-y2[k])==30:
				UR_block1+=1
			if (x-x2[k])==5*30 and (y2[k]-y)==5*30:
				UR_block1+=1		
		if UR_count1left==4 and UR_block1<2 and UR_count1right==0:	
			return 1
		return 0	
			
	def UR_third(x,y,x1,y1,x2,y2):
		UR_count3left=0
		UR_count3right=0
		UR_block3=0
		UR_sixth3=0
		for i in range (len(x1)):
			for j in range(1,3): #1,2
				n3=y-y1[i]
				if abs(n3/30)==j:
					if (n3>0):
						if (x+abs(n3))==x1[i]:
							UR_count3right+=1
					if (n3<0):
						if (x-abs(n3))==x1[i]:
							UR_count3left+=1
			if (x1[i]-x)==3*30 and (y-y1[i])==3*30:
				UR_sixth3+=1
			if (x-x1[i])==3*30 and (y1[i]-y)==3*30:
				UR_sixth3+=1			
		for k in range (len(x2)):					
			if (x2[k]-x)==3*30 and (y-y2[k])==3*30:
				UR_block3+=1
			if (x-x2[k])==3*30 and (y2[k]-y)==3*30:
				UR_block3+=1			
		if UR_count3left==2 and UR_count3right==2 and UR_block3<2 and UR_sixth3==0:
			return 1
		return 0	
		
	def UR_second(x,y,x1,y1,x2,y2):
		UR_count2left=0
		UR_count2right=0
		UR_block2=0
		UR_sixth2=0
		for i in range(len(x1)):
			if y-y1[i]==30 and x1[i]-x==30: #1 upper right
				UR_count2right+=1
			for j in range(1,4): #1,2,3 lower left
				n2=(y1[i]-y)   
				if (n2/30)==j:
					if (x-n2)==x1[i]:
						UR_count2left+=1
			if x1[i]-x==2*30 and y-y1[i]==2*30:
				UR_sixth2+=1	
			if x-x1[i]==4*30 and y1[i]-y==4*30:
				UR_sixth2+=1
		for k in range(len(x2)):				
			if x2[k]-x==2*30 and y-y2[k]==2*30:
				UR_block2+=1
			if x-x2[k]==4*30 and y2[k]-y==4*30:
				UR_block2+=1
		if UR_count2left==3 and UR_count2right==1 and UR_block2<2 and UR_sixth2==0:
			return 1
		return 0		
	
	if UR_First(x,y,x1,y1,x2,y2) or UR_third(x,y,x1,y1,x2,y2) or UR_second(x,y,x1,y1,x2,y2):
		return 1
	return 0
	
def WinCondition(x,y,x1,y1,x2,y2,x3,y3,x4,y4): 
	if Straight(x,y,x1,y1,x2,y2) or Straight(630-x,630-y,x3,y3,x4,y4) or Straight(630-y,x,y3,x1,y4,x2) or Straight(y,630-x,y1,x3,y2,x4) or Skew(x,y,x1,y1,x2,y2) or Skew(y,x,y1,x1,y2,x2) or Skew(y,630-x,y1,x3,y2,x4) or Skew(630-y,x,y3,x1,y4,x2):
		return 1
	return 0	

rightboard = Canvas(caro, width = right_width, height = right_height, bg="#00ffff")
rightboard.pack()
 
rightboard.create_rectangle(init1,init2,init3,init4,fill="white")
rightboard.create_rectangle(init5,init6,init7,init8,fill="white")
rightboard.create_text(text1,text2, anchor=CENTER, font = "Odachi 20", text = s1)
rightboard.create_text(text3,text4, anchor=CENTER, font = "Odachi 20", text = s2)
rightboard.create_line(init9-50,init10-50,init9+50,init10+50,fill="red",width=5)
rightboard.create_line(init9+50,init10-50,init9-50,init10+50,fill="red",width=5)

def turn_circle():
	rightboard.create_rectangle(init1,init2,init3,init4,fill="white")
	rightboard.create_rectangle(init5,init6,init7,init8,fill="white")
	rightboard.create_text(text1,text2, anchor=CENTER, font = "Odachi 20", text = s1)
	rightboard.create_text(text3,text4, anchor=CENTER, font = "Odachi 20", text = s2)
	rightboard.create_oval(init9-50,init10-50,init9+50,init10+50,outline="green",width=5)

def turn_cross():
	rightboard.create_rectangle(init1,init2,init3,init4,fill="white")
	rightboard.create_rectangle(init5,init6,init7,init8,fill="white")
	rightboard.create_text(text1,text2, anchor=CENTER, font = "Odachi 20", text = s1)
	rightboard.create_text(text3,text4, anchor=CENTER, font = "Odachi 20", text = s2)
	rightboard.create_line(init9-50,init10-50,init9+50,init10+50,fill="red",width=5)
	rightboard.create_line(init9+50,init10-50,init9-50,init10+50,fill="red",width=5)
		
def callback(event):
	global count
	global stop
	if stop==0 and check(point(event.x), point(event.y))==0 and point(event.x)!=0 and point(event.y)!=0 and point(event.x)!=630 and point(event.y)!=630:
		rightboard.delete("all")
		if count % 2==0:
			draw_cross(point(event.x), point(event.y))
			save_cross(point(event.x), point(event.y))
			turn_circle()
		else:	
			draw_circle(point(event.x), point(event.y))
			save_circle(point(event.x), point(event.y))
			turn_cross()
		count+=1
		print(count)
		print (point(event.x),point(event.y))
		save (point(event.x),point(event.y))
		if count >=9:
			if WinCondition(point(event.x),point(event.y),x1,y1,x2,y2,x3,y3,x4,y4) and check_cross(point(event.x),point(event.y)):
				print ("Player1 Win!!!")
				stop=1
			else:		
				if WinCondition(point(event.x),point(event.y),x2,y2,x1,y1,x4,y4,x3,y3) and check_circle(point(event.x),point(event.y)):
					print ("Player2 Win!!!")
					stop=1
			
board.bind("<Button-1>", callback)	

caro.mainloop()
